{"data":{"site":{"siteMetadata":{"title":"kahvi's blog","author":"Kahvi Patel"}},"markdownRemark":{"id":"61fe281f-72cd-5e3f-800e-c86ebb5b3b47","excerpt":"Over the course of summer 2018, I forked and developed a volunteer scheduling database application. The README  I created builds on the forked repository'sâ€¦","html":"<p>Over the course of summer 2018, I forked and developed a volunteer scheduling database application. The <a href=\"https://github.com/iamkahvi/volunteers\">README </a> I created builds on the <a href=\"https://github.com/playasoft/volunteers\">forked repository's README</a> and describes usage, features and installation of the application.</p>\n<p>This post exists to specify which features I developed alone.</p>\n<h2>Table of Content</h2>\n<ul>\n<li>\n<p><a href=\"#ui-design\">UI Design</a></p>\n<ul>\n<li>Dashboard</li>\n<li>Event Page</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#backend-features\">Backend Features</a></p>\n<ul>\n<li>Email Notifications</li>\n<li>Hide Empty Days Feature</li>\n<li>Filtering Users by Role for admins</li>\n<li>Change to Reminder timing through .ENV laravel doc</li>\n<li>Filter by week</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>UI Design</h2>\n<h3>Event Page</h3>\n<p>I added a legend to the Event page. I changed the text formatting to make the page more legible.\nI changed the date format to make the page more legible.</p>\n<p><img src=\"/assets/EventCompare.png\" alt=\"Compare Event\"></p>\n<h3>Dashboard</h3>\n<p>Using the bootstrap list items element, I made the dashboard more legible.</p>\n<p><img src=\"/assets/DashboardCompare.png\" alt=\"Compare Dashboard\"></p>\n<hr>\n<h2>Backend Features</h2>\n<h3>Email Notifications</h3>\n<p>On the advice of the original developer, my plan for developing the email notification feature was:</p>\n<ol>\n<li>Create a console command which loops through a table for any shifts starting within the next \"hour\"</li>\n<li>If a volunteer has signed up for that slot, send them a notification</li>\n<li>Add value to SQL table to prevent further notifications</li>\n<li>Add the command to the Laravel cron so it runs periodically (every 5 minutes? 15 minutes?)</li>\n</ol>\n<p>This approach was somewhat inefficient given the Laravel cron would be running continuously when it wouldn't need to. Scheduling a task immediately when a user signs up instead of iterating through the table continuously would be a better approach. Ultimately I chose to implement the feature as a simple solution using the existing schema as opposed to changing the schema and the controller logic.</p>\n<p>To work through the logic of when to send reminders, I create variables for when the shift starts and when to remind the user for that specific\nshift. I do this by creating two <a href=\"https://carbon.nesbot.com/docs/\">Carbon</a> dates and add a user-designated amount of hours to the second variable.</p>\n<pre><code class=\"language-php\">&#x3C;?php\n\n// Cycle through all the slots\nforeach($shifts as $shift)\n{\n    $startDate = new Carbon(date('Y-m-d H:i:s', strtotime(\"$shift->start_date $shift->start_time\")));\n\n    $remindDate = new Carbon(date('Y-m-d H:i:s', strtotime(\"$shift->start_date $shift->start_time\")));\n\n    $now = Carbon::now();\n\n    $remindDate->subHours(env('REMIND_HOURS'));\n</code></pre>\n<p>I find the shift starting within the given reminder period using the variables.</p>\n<pre><code class=\"language-php\">&#x3C;?php\nif($remindDate &#x3C;= $now and $startDate > $now)\n</code></pre>\n<p>Then, I cycle through all users to find who is registered for the shift in question.</p>\n<pre><code class=\"language-php\">&#x3C;?php\nforeach ($users as $user)\n    {\n        // Find user that is registered for this shift\n        if ($user->id == $shift->user_id) {\n</code></pre>\n<p>Then I notify the user of the shift. I used the <a href=\"https://www.mailgun.com/email-api\">MailGun api</a> with <a href=\"https://laravel.com/docs/5.2/mail\">Laravel</a> to send the emails.</p>\n<pre><code class=\"language-php\">&#x3C;?php           \n// Notify user of upcoming shift\nif($shift->isNotified == 'No')\n{\n    $user->notify(new shiftStarting($shift, $user));\n} else\n</code></pre>\n<p>In order to prevent the user from getting continuously notified, I created a column in the shifts table to track notification status.</p>\n<pre><code class=\"language-php\">&#x3C;?php\n\n// Update isNotified value in SQL database\nDB::table('slots')\n    ->where('id', $shift->id)\n    ->update(['isNotified' => 'Yes']);\n</code></pre>\n<br>\n<h3>Hide Empty Days Feature</h3>\n<p>The Volunteer Robot often displayed days on the event page which didn't contain any shifts. This meant a lot of unecessary scrolling for users.</p>\n<p>My strategy was to cycle through each day that would be displayed on the event page and check if the day had a shift.\nFortunately, this check was relatively simple after looking into different SQL queries.</p>\n<pre><code class=\"language-php\">&#x3C;?php\n// Pluck all of the shift IDs for this event and check the if any in the schedule start today\nif(Schedule::whereIn('shift_id', $shifts)->where('dates', 'LIKE', \"%\".$date->format('Y-m-d').\"%\")->get()->isEmpty())\n{\n// Continue onto the next day\n$date->addDay();\ncontinue;\n</code></pre>\n<br>\n<h3>Filtering Users by Role for admins</h3>\n<p>The admins of the Volunteer Robot regularly send out mass emails to volunteers according to their \"Role\". They wanted to filter the users by their Role in order to access email addresses more efficiently.   </p>\n<p>I wanted to work in plain javascript for this feature to familiarize myself. This feature was challenging because the Users, Roles, and User Roles are all located in seperate SQL tables. Thankfully, this issue was easy to deal with once I understood how to make SQL queries within blade.php files. I plucked each user's roles from the User Role table and put it in a class attribute.</p>\n<p><img src=\"/assets/FilterUsersHTML.png\" alt=\"Filer Users HTML\"></p>\n<p>On the other end, my main concern was how to filter users with multiple roles. Since my query returned a string of text, there was no way to distinguish one role from another. I had to split the result of that query in javascript to make it an array of each role. Then it was much easier to find out if the specified user had that role in their respective array.  </p>\n<pre><code class=\"language-javascript\"> $('.filter-user-roles').on('change', function () {\n       \n        // define the role\n        var role = $(\".filter-user-roles\").val();\n\n        // define all the spans of the users\n        var users = document.querySelectorAll('.email-block .user-block');\n\n        // hide all the users\n        users.forEach(function(element) {\n            element.style.display = \"none\";\n        });\n\n        if (role == \"all\") {\n            \n            // show all users\n            users.forEach(function(element) {\n                element.style.display = \"inline\";\n            });\n        \n        } else {\n\n            // show user if they have that role\n            users.forEach(function(user) {\n\n                var userRoles = user.getAttribute('data-role').slice(1,-1).split(\",\");\n\n                if (userRoles.includes(role)) {\n                    user.style.display = \"inline\";\n                }\n            })\n\n        }\n    });\n</code></pre>\n<br>\n<h3>Filter by week</h3>\n<p>Fortunately, there existed an implementation of a feature similar to this one in the application. This made it much easier to work this one out.</p>\n<pre><code class=\"language-javascript\">// Hide all the days\n$('.days .day').addClass('hidden');\n\n// Convert date to Moment format\nlet m = moment();\n\nm = moment(date.toString());\n\n// Show this one\n\n// Loop through seven days\nfor(var i = 0; i &#x3C; 7; i++)\n{\n    $('.days .day[data-date=\"' + m.format('Y-MM-DD') + '\"]').removeClass('hidden');\n    $(window).trigger('resize');\n    m.add(1, 'days');\n}\n</code></pre>\n<p>The most challenging part of implementing this feature was installing the Moment package on the active server. Without this package, I wasn't able to manipulate date strings easily.\nSince the server ran Ubuntu, the package wouldn't install. After some Googling, one line of code in the header.blade.php solved all my problems.</p>\n<pre><code class=\"language-html\"> &#x3C;script src=\"https://cdn.jsdelivr.net/npm/moment@2.22.2/moment.min.js\">&#x3C;/script>\n</code></pre>\n<br>","frontmatter":{"title":"Volunteer Robot","date":"September 12, 2018","description":"Overview of Implemented Features"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-09-12-Volunteer Robot/","previous":{"fields":{"slug":"/2018-09-10-position paper/"},"frontmatter":{"title":"position paper"}},"next":{"fields":{"slug":"/2018-11-22-shortcuts/"},"frontmatter":{"title":"shortcuts"}}}}